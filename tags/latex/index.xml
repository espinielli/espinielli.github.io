<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Latex on Enrico&#39;s Blog</title>
    <link>http://enrico.spinielli.net/tags/latex/</link>
    <description>Recent content in Latex on Enrico&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Enrico Spinielli</copyright>
    <lastBuildDate>Thu, 19 Apr 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://enrico.spinielli.net/tags/latex/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>wiki of the future?</title>
      <link>http://enrico.spinielli.net/2012/04/19/wiki-of-future/</link>
      <pubDate>Thu, 19 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://enrico.spinielli.net/2012/04/19/wiki-of-future/</guid>
      <description>Last weekend I have been watching, reading and playing around with Ward Cunningham&#39;s Smallest Federated Wiki. As usual he is a great designer and aims to simple, effective, understandable and useful tools! I particularly like the plugins idea (not new of course) and how easy it seems to be to add new ones, like support for MathJax:  Get inspired you too!</description>
    </item>
    
    <item>
      <title>LaTeX on Blogger again</title>
      <link>http://enrico.spinielli.net/2012/01/20/latex-on-blogger-again/</link>
      <pubDate>Fri, 20 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://enrico.spinielli.net/2012/01/20/latex-on-blogger-again/</guid>
      <description>MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}});  My previous post&amp;nbsp;about&amp;nbsp;LaTeX&amp;nbsp;&amp;nbsp;on Blogger&amp;nbsp;reported that the solution described there did not work anymore...
Now I found a new solution based on mathjax.
So let&#39;s try it straight away with inline math, like the great equation \(e^{-2\pi}\), and with displayed math like the following:
\[ \left [ - \frac{\hbar^2}{2 m} \frac{\partial^2}{\partial x^2} + V \right ] \Psi
= i \hbar \frac{\partial}{\partial t} \Psi \]</description>
    </item>
    
    <item>
      <title>LaTeX on Blogger</title>
      <link>http://enrico.spinielli.net/2009/11/11/text-on-latex-snippet-in-blogger-from/</link>
      <pubDate>Wed, 11 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>http://enrico.spinielli.net/2009/11/11/text-on-latex-snippet-in-blogger-from/</guid>
      <description>An inline snippet of LaTeX \(e^{\pi i}+1=0\) in blogger (from http://watchmath.com/vlog/?p=438 but it now, Oct 2010, shows crap!).
You can as well have it in display style \[e^{\pi i}+1=0\].</description>
    </item>
    
    <item>
      <title>Scons and noweb</title>
      <link>http://enrico.spinielli.net/2009/06/14/scons-and-noweb/</link>
      <pubDate>Sun, 14 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>http://enrico.spinielli.net/2009/06/14/scons-and-noweb/</guid>
      <description>I was curious to see how I could integrate noweb and Scons.
You can download my little Sconstruct for this, Sconstruct.example. It defines two builders. NoWeave is used to produce TeX or LaTeX documents, while NoTangle extracts the non-document artefacts, i.e. programs, config files, scripts &amp;hellip; It also includes productions for generating a sample program about Ackermann function:
ackdoc = env.NoWeave(&amp;#39;ack.tex&amp;#39;, &amp;#39;ack.nw&amp;#39;) ackcode = env.NoTangle(&amp;#39;ack.py&amp;#39;, &amp;#39;ack.nw&amp;#39;) acktest = env.NoTangle(&amp;#39;ackTest.py&amp;#39;, &amp;#39;ack.nw&amp;#39;) The noweb source is ack.</description>
    </item>
    
    <item>
      <title>LaTeX, Python and Literate Programming</title>
      <link>http://enrico.spinielli.net/2009/02/24/latex-python-and-literate-programming/</link>
      <pubDate>Tue, 24 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>http://enrico.spinielli.net/2009/02/24/latex-python-and-literate-programming/</guid>
      <description>In my spare time (a couple of hours per weekend&amp;hellip;!) I am implementing calcal, a Python version of calendrica-3.0.cl, the Common Lisp implementation of the calendars from N. Dershowitz, E. M. Reingold Calendrical Calculations, 3rd Edition. (In case you are interested you can find a preview in my github repo.)
At some point I decided to go Literate Programming using noweb. This is an experiment in the experiment but so far it has been a good choice because I can define all I need in the same place and generate documentation, source code (Python, shell scripts &amp;hellip;) from the same source.</description>
    </item>
    
    <item>
      <title>My Giants</title>
      <link>http://enrico.spinielli.net/2009/02/23/my-giants/</link>
      <pubDate>Mon, 23 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>http://enrico.spinielli.net/2009/02/23/my-giants/</guid>
      <description>I am probably too selective, anyway my models for computer science/software engineering (one of them would disagree on both definitions) are just two: Donald E. Knuth and Alan Kay.
The first one continues to surprise me with the depth, clarity and joy of his works: from TeX (well, I use LaTex but it does not exist without TeX) to The Art of Computer Programming to Literate Programming.
About the latter, I was one of the blessed to be present to his Turing Award Lecture: he shocked me to the point I had two sleepless nights so angry I was about having wasted so much time in useless (computer) matters!</description>
    </item>
    
  </channel>
</rss>